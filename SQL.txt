SELECT *FROM Customers WHERE age=31 AND country="USA";
--SELECT *FROM Customers WHERE age=28;


*FROM  ->>>>>>>>>>>>> Select column from Table 

##################################################################################

#3 DATABASES
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶®‡¶§‡ßÅ‡¶® ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶á‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶ø‡ßü‡¶Æ‡•§


CREATE DATABASE school;
USE school;

#4 TABLES
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶á‡¶∏‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü ‡¶Ø‡¶æ‡¶§‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶•‡¶æ‡¶ï‡ßá‡•§

CREATE TABLE students (
  id INT,
  name VARCHAR(50),
  age INT
);


#5 INSERT ROWS
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

INSERT INTO students (id, name, age) VALUES (1, 'Rahim', 20);
..............................................................................................


INSERT INTO `student_data`(`ID`, `Name`, `Adress`, `Roll`, `Religion`, `Gender`, `Phone_no`) 
VALUES (170,'M','Dhaka',155,'Islam','M','01784032597')

...............................................................................................



#ALTER ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DROP + ADD + MODIFY 




ALTER TABLE `student_data`
  DROP `Name`,
  DROP `Adress`,
  DROP `Roll`,
  DROP `Religion`,
  DROP `Gender`,
  DROP `Phone_no`;


ALTER TABLE Students
DROP 'Name',
ADD 'Roll' INT, 
MODIFY COLUMN age VARCHAR(10);

// delete a table
DROP TABLE Students;

...........................................................................................



-- ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø
CREATE TABLE Students (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    age INT
);

-- ‡¶°‡ßá‡¶ü‡¶æ Insert
INSERT INTO Students (id, name, age) VALUES (1, 'Hasib', 22);

-- ‡¶°‡ßá‡¶ü‡¶æ Read
SELECT * FROM Students;

-- ‡¶°‡ßá‡¶ü‡¶æ Update
UPDATE Students SET age = 23 WHERE id = 1;

-- ‡¶°‡ßá‡¶ü‡¶æ Delete
DELETE FROM Students WHERE id = 1;





................................................................................................
#6 SELECT
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶π‡ßü‡•§

SELECT * FROM students;

SELECT id, name, phn FROM students;

//DISTINCT: ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶á‡¶â‡¶®‡¶ø‡¶ï (‡¶Ö‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡¶Ø‡¶º) ‡¶Æ‡¶æ‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡ßü, ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡ßü‡•§
 
SELECT DISTINCT Country FROM Customers; 
 












#7 UPDATE & DELETE
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:

UPDATE: ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

DELETE: ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡•§


UPDATE students SET age = 21 WHERE id = 1;
DELETE FROM students WHERE id = 1;


#8 AUTOCOMMIT, COMMIT, ROLLBACK
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶æ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡•§

START TRANSACTION;
UPDATE students SET name='Karim' WHERE id=2;
ROLLBACK; -- ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
COMMIT; -- ‡¶∏‡ßç‡¶•‡¶æ‡ßü‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£


#9 UNIQUE
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶ï‡ßã‡¶® ‡¶ï‡¶≤‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶® ‡¶Ø‡ßá‡¶® ‡¶ï‡¶ñ‡¶®‡ßã ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶®‡¶æ ‡¶π‡ßü‡•§

CREATE TABLE users (
  email VARCHAR(100) UNIQUE
);


#10 NOT NULL
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶ï‡ßã‡¶® ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§

CREATE TABLE users (
  username VARCHAR(50) NOT NULL
);


#11 CHECK
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶ï‡ßã‡¶® ‡¶∂‡¶∞‡ßç‡¶§ ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶®‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶¨‡ßá ‡¶®‡¶æ‡•§

CREATE TABLE students (
  age INT CHECK (age >= 18)
);


#12 DEFAULT
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶ï‡ßã‡¶® ‡¶Æ‡¶æ‡¶® ‡¶®‡¶æ ‡¶¶‡¶ø‡¶≤‡ßá ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶Æ‡¶æ‡¶® ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡•§

CREATE TABLE students (
  status VARCHAR(20) DEFAULT 'active'
);


#13 PRIMARY KEYS
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶è‡¶¨‡¶Ç NOT NULL ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶Ø‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∞‡ßã‡¶ï‡ßá ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá‡•§

CREATE TABLE students (
  id INT PRIMARY KEY,
  name VARCHAR(50)
);


#14 AUTO_INCREMENT
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡ßã ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶≤‡ßá ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡¶æ‡ßú‡ßá‡•§


CREATE TABLE students (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(50)
);


#15 FOREIGN KEYS
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶è‡¶ï ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ PRIMARY KEY ‡¶ï‡ßá ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§

CREATE TABLE classes (
  student_id INT,
  FOREIGN KEY (student_id) REFERENCES students(id)
);

.................................................................................................................. JOIN 
#16 JOINS
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡•§

SELECT students.name, classes.class_name
FROM students
JOIN classes ON students.id = classes.student_id;




üß© ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£
‡¶ß‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ï ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶Ü‡¶õ‡ßá:

Employees ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤:
emp_id	emp_name	dept_id
1	Alice	10
2	Bob	20
3	Charlie	30
4	David	NULL

Departments ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤:
dept_id	dept_name
10	HR
20	Engineering
40	Marketing

1. üîó INNER JOIN
‚û°Ô∏è ‡¶â‡¶≠‡ßü ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶á ‡¶Æ‡¶ø‡¶≤ ‡¶•‡¶æ‡¶ï‡¶æ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá‡¶á ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü‡•§


SELECT emp_name, dept_name
FROM Employees
INNER JOIN Departments
ON Employees.dept_id = Departments.dept_id;
üìå ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:

emp_name	dept_name
Alice	HR
Bob	Engineering

2. üîó LEFT JOIN (LEFT OUTER JOIN)
‚û°Ô∏è Employees ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü, ‡¶Ü‡¶∞ ‡¶Æ‡¶ø‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ Departments ‡¶•‡ßá‡¶ï‡ßá‡•§


SELECT emp_name, dept_name
FROM Employees
LEFT JOIN Departments
ON Employees.dept_id = Departments.dept_id;
üìå ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:

emp_name	dept_name
Alice	HR
Bob	Engineering
Charlie	NULL
David	NULL

3. üîó RIGHT JOIN (RIGHT OUTER JOIN)
‚û°Ô∏è Departments ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü, ‡¶Ü‡¶∞ ‡¶Æ‡¶ø‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ Employees ‡¶•‡ßá‡¶ï‡ßá‡•§


SELECT emp_name, dept_name
FROM Employees
RIGHT JOIN Departments
ON Employees.dept_id = Departments.dept_id;
üìå ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:

emp_name	dept_name
Alice	HR
Bob	Engineering
NULL	Marketing

4. üîó FULL OUTER JOIN
‚û°Ô∏è ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü‡•§ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶Æ‡¶ø‡¶≤ ‡¶®‡ßá‡¶á, ‡¶∏‡ßá‡¶ñ‡¶æ‡¶®‡ßá NULL‡•§

‚úÖ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ (‡¶Ø‡ßá‡¶Æ‡¶®: PostgreSQL) ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø FULL OUTER JOIN ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá:

SELECT emp_name, dept_name
FROM Employees
FULL OUTER JOIN Departments
ON Employees.dept_id = Departments.dept_id;
üìå ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:

emp_name	dept_name
Alice	HR
Bob	Engineering
Charlie	NULL
David	NULL
NULL	Marketing

‚õî MySQL-‡¶è ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø FULL OUTER JOIN ‡¶®‡ßá‡¶á, ‡¶§‡¶¨‡ßá UNION ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü:


SELECT emp_name, dept_name
FROM Employees
LEFT JOIN Departments
ON Employees.dept_id = Departments.dept_id

UNION

SELECT emp_name, dept_name
FROM Employees
RIGHT JOIN Departments
ON Employees.dept_id = Departments.dept_id;


>>>>>>>>>>>>>>>>>>>>‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá:
JOIN Type	‡¶ï‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü
INNER JOIN	‡¶¶‡ßÅ‡¶á ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶á ‡¶Æ‡¶ø‡¶≤ ‡¶Ü‡¶õ‡ßá ‡¶è‡¶Æ‡¶® ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°
LEFT JOIN	‡¶¨‡¶æ‡¶Æ (‡¶™‡ßç‡¶∞‡¶•‡¶Æ) ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° + ‡¶Æ‡¶ø‡¶≤ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶°‡¶æ‡¶® ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤
RIGHT JOIN	‡¶°‡¶æ‡¶® (‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü) ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° + ‡¶Æ‡¶ø‡¶≤ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶¨‡¶æ‡¶Æ ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤
FULL OUTER JOIN	‡¶¶‡ßÅ‡¶á ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°, ‡¶Æ‡¶ø‡¶≤ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá NULL

................................................................................................................. JOIN





#17 FUNCTIONS
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶ó‡¶æ‡¶£‡¶ø‡¶§‡¶ø‡¶ï ‡¶¨‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ø‡ßá‡¶Æ‡¶® COUNT(), MAX()‡•§

SELECT COUNT(*) FROM students;
SELECT COUNT(*) FROM Customers WHERE age>30;

SELECT COUNT(*) AS abc FROM Customers; --WHERE age>30;

SELECT MAX(age) FROM Customers; 
SELECT MIN(age) FROM Customers; 
SELECT AVG(age) FROM Customers; 


function list link 
https://www.w3schools.com/sql/sql_ref_sqlserver.asp






#18 AND, OR, NOT
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶∂‡¶∞‡ßç‡¶§‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡•§

SELECT * FROM students WHERE age > 18 AND status = 'active';




#19 WILD CARDS
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: %, _ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Ç‡¶∂‡¶ø‡¶ï ‡¶ñ‡ßã‡¶Å‡¶ú ‡¶ï‡¶∞‡¶æ‡•§

SELECT * FROM students WHERE name LIKE 'R%';
SELECT * FROM students WHERE name LIKE '%R';
SELECT * FROM students WHERE name LIKE '_R%';

SELECT * FROM students WHERE dob LIKE '____-01-01';

#20 ORDER BY
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶∏‡¶æ‡¶ú‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡•§
ASC --> Default
SELECT * FROM students ORDER BY age DESC;


#21 LIMIT
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶ï‡¶§‡¶ü‡¶ø ‡¶∞‡ßã ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá ‡¶§‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ‡•§


SELECT * FROM students LIMIT 5;


#22 UNIONS
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï SELECT ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶è‡¶ï‡¶§‡ßç‡¶∞ ‡¶ï‡¶∞‡¶æ‡•§
SELECT name FROM students
UNION
SELECT name FROM teachers;


#23 SELF JOINS
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶è‡¶ï‡¶á ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶®‡¶ø‡¶ú‡ßá‡¶á JOIN ‡¶ï‡¶∞‡¶æ‡•§

SELECT A.name, B.name
FROM employees A, employees B
WHERE A.manager_id = B.id;


#24 VIEWS
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶è‡¶ï ‡¶¨‡¶æ ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï or self ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá ‡¶≠‡¶æ‡¶∞‡ßç‡¶ö‡ßÅ‡ßü‡¶æ‡¶≤ ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡•§

CREATE VIEW student_view AS
SELECT name, age FROM students;



#25 INDEXES
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡•§

CREATE INDEX idx_name ON students(name);



#26 SUBQUERIES
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡ßã‡ßü‡ßá‡¶∞‡¶ø‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶ø ‡¶ï‡ßã‡ßü‡ßá‡¶∞‡¶ø‡•§

SELECT name FROM students
WHERE age > (SELECT AVG(age) FROM students);



........................................................................................................................................... GROUP BY
#27 GROUP BY
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶è‡¶ï‡¶á ‡¶ü‡¶æ‡¶á‡¶™‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡ßá ‡¶ó‡¶†‡¶® ‡¶ï‡¶∞‡ßá ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ó‡•§

SELECT age, COUNT(*) FROM students GROUP BY age;



GROUP BY SQL-‡¶è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü ‡¶è‡¶ï‡¶á ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶ó‡¶£‡¶®‡¶æ (count, sum, avg ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø) ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

‚úÖ ‡¶∏‡¶π‡¶ú ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£
‡¶ß‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ï ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø Orders ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶Ü‡¶õ‡ßá:

Orders ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤:
order_id	customer_name	amount
1	Alice	100
2	Bob	200
3	Alice	150
4	Charlie	300
5	Bob	100

üéØ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ 1: ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ
sql
Copy
Edit
SELECT customer_name, COUNT(*) AS total_orders
FROM Orders
GROUP BY customer_name;
üìå ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:

customer_name	total_orders
Alice	2
Bob	2
Charlie	1





.......................................................................................................................................... GROUP BY




......................................................................................................................................... ROLLUP


#28 ROLLUP
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: GROUP BY ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤ ‡¶∏‡¶π ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶§‡ßà‡¶∞‡¶ø‡•§

SELECT age, COUNT(*) FROM students GROUP BY age WITH ROLLUP;

üî∑ ‡¶ß‡¶∞‡ßã ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶Ü‡¶õ‡ßá ‡¶Ø‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ sales (‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º)‡•§
‡¶è‡¶á ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶Ü‡¶õ‡ßá:

‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó (department)	‡¶Ü‡¶Ø‡¶º (revenue)
‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶®‡¶ø‡¶ï‡¶∏	1000
‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶®‡¶ø‡¶ï‡¶∏	1500
‡¶ú‡¶æ‡¶Æ‡¶æ‡¶ï‡¶æ‡¶™‡¶°‡¶º	500
‡¶ú‡¶æ‡¶Æ‡¶æ‡¶ï‡¶æ‡¶™‡¶°‡¶º	700

‚úÖ ‡¶è‡¶ñ‡¶® ‡¶Ø‡¶¶‡¶ø ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶ì ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó‡ßá ‡¶Æ‡ßã‡¶ü ‡¶ï‡¶§ ‡¶Ü‡¶Ø‡¶º ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶≤‡¶ø‡¶ñ‡¶¨‡ßá:

SELECT department, SUM(revenue)
FROM sales
GROUP BY department;
‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶π‡¶¨‡ßá:

department	SUM(revenue)
‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶®‡¶ø‡¶ï‡¶∏	2500
‡¶ú‡¶æ‡¶Æ‡¶æ‡¶ï‡¶æ‡¶™‡¶°‡¶º	1200

‚úÖ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶ñ‡¶® ‡¶Ø‡¶¶‡¶ø ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶ì:
üëâ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó‡ßá‡¶∞ ‡¶Æ‡ßã‡¶ü
üëâ ‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó‡ßá‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡¶Æ‡ßã‡¶ü ‡¶Ü‡ßü ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá‡¶á ‡¶¶‡ßá‡¶ñ‡¶§‡ßá

‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶≤‡¶ø‡¶ñ‡¶¨‡ßá:


SELECT department, SUM(revenue)
FROM sales
GROUP BY ROLLUP(department);
‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶π‡¶¨‡ßá:

department	SUM(revenue)
‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶®‡¶ø‡¶ï‡¶∏	2500
‡¶ú‡¶æ‡¶Æ‡¶æ‡¶ï‡¶æ‡¶™‡¶°‡¶º	1200
NULL	3700 ‚Üê (‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó‡ßá‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡¶Æ‡ßã‡¶ü)




............................................................................................................................................    ROLLUP






............................................................................................................................................ ON DELETE
#29 ON DELETE
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: Parent ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡ßã ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶ó‡ßá‡¶≤‡ßá Child ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶ï‡ßÄ ‡¶π‡¶¨‡ßá‡•§

FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE;


üß± ‡¶ß‡¶∞‡ßã ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤:
1. students (parent table)

2. marks (child table, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá student_id ‡¶π‡¶ö‡ßç‡¶õ‡ßá foreign key)

üîπ 1. ON DELETE CASCADE

CREATE TABLE students (
    id INT PRIMARY KEY,
    name VARCHAR(100)
);

CREATE TABLE marks (
    id INT PRIMARY KEY,
    student_id INT,
    subject VARCHAR(50),
    score INT,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE
);
‚úÖ ‡¶Ö‡¶∞‡ßç‡¶•:
‡¶Ø‡¶¶‡¶ø students ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã id delete ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá marks ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßá‡¶á student_id ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶∏‡¶¨ rows ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

üîπ 2. ON DELETE SET NULL

CREATE TABLE marks (
    id INT PRIMARY KEY,
    student_id INT,
    subject VARCHAR(50),
    score INT,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE SET NULL
);
‚úÖ ‡¶Ö‡¶∞‡ßç‡¶•:
‡¶Ø‡¶¶‡¶ø parent ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã student delete ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá marks ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶§‡¶æ‡¶∞ student_id NULL ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

‚ö†Ô∏è ‡¶è‡¶á ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá student_id ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡¶ï‡ßá NULL ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá:


student_id INT NULL
üîπ 3. ON DELETE RESTRICT
sql
Copy
Edit
CREATE TABLE marks (
    id INT PRIMARY KEY,
    student_id INT,
    subject VARCHAR(50),
    score INT,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE RESTRICT
);
‚úÖ ‡¶Ö‡¶∞‡ßç‡¶•:
‡¶Ø‡¶¶‡¶ø marks ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶ï‡ßã‡¶®‡ßã student_id ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶á student ‡¶ï‡ßá delete ‡¶ï‡¶∞‡¶§‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá ‡¶®‡¶æ‡•§ Error ‡¶¶‡ßá‡¶¨‡ßá‡•§

üîπ 4. ON DELETE NO ACTION

CREATE TABLE marks (
    id INT PRIMARY KEY,
    student_id INT,
    subject VARCHAR(50),
    score INT,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE NO ACTION
);
‚úÖ ‡¶Ö‡¶∞‡ßç‡¶•:
‡¶è‡¶ü‡¶æ‡¶ì RESTRICT ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§ ‡¶ï‡ßã‡¶®‡ßã student_id ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡¶≤‡ßá delete ‡¶ï‡¶∞‡¶§‡ßá ‡¶¶‡ßá‡¶¨‡ßá ‡¶®‡¶æ‡•§

üîπ 5. ON DELETE SET DEFAULT

CREATE TABLE marks (
    id INT PRIMARY KEY,
    student_id INT DEFAULT 0,
    subject VARCHAR(50),
    score INT,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE SET DEFAULT
);
‚úÖ ‡¶Ö‡¶∞‡ßç‡¶•:
‡¶Ø‡¶¶‡¶ø parent student delete ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá child ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ student_id default ‡¶Æ‡¶æ‡¶®‡ßá (‡¶Ø‡ßá‡¶Æ‡¶® 0) ‡¶¨‡¶∏‡¶¨‡ßá‡•§

‚ö†Ô∏è ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø student_id ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡ßá DEFAULT ‡¶Æ‡¶æ‡¶® ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡ßü‡•§

üß™ Bonus: Dummy Data

INSERT INTO students VALUES (1, 'Hasan'), (2, 'Rahim');

INSERT INTO marks VALUES
(101, 1, 'Math', 90),
(102, 1, 'Science', 85),
(103, 2, 'Math', 88);




üîö ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ:
Condition	Delete ‡¶ï‡¶∞‡¶≤‡ßá ‡¶ï‡ßÄ ‡¶π‡ßü?
CASCADE	Child table-‡¶è‡¶∞ matching row ‡¶ó‡ßÅ‡¶≤‡ßã‡¶ì delete
SET NULL	student_id NULL ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü
RESTRICT / NO ACTION	Delete ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá Error
SET DEFAULT	student_id default ‡¶Æ‡¶æ‡¶®‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞‡¶ø‡¶§ ‡¶π‡ßü

.............................................................................................................................................. ON DELETE

#30 STORED PROCEDURES
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: SQL ‡¶ï‡ßã‡¶° ‡¶¨‡ßç‡¶≤‡¶ï ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶§‡ßá ‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

DELIMITER //
CREATE PROCEDURE GetAllStudents()
BEGIN
  SELECT * FROM students;
END;
//



......................................................................................... DELIMITER
DELIMITER $$

CREATE PROCEDURE GetAllStudents()
BEGIN
  SELECT * FROM Customers;
END $$

DELIMITER ;





CALL GetAllStudents();

..................................................................


DELIMITER $$

CREATE PROCEDURE GetAllStudentsByCity(IN input_city VARCHAR(100))
BEGIN
  SELECT * FROM Customers
  WHERE city = input_city;
END $$

DELIMITER ;





CALL GetAllStudents("Dhaka");

..............................................................................................DELIMITER



#31 TRIGGERS
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ: ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ò‡¶ü‡¶®‡¶æ ‡¶ò‡¶ü‡¶≤‡ßá ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡•§

CREATE TRIGGER before_insert_student
BEFORE INSERT ON students
FOR EACH ROW
SET NEW.status = 'active';
####################################################################################################################



‚úÖ 1. DATABASES
Definition: A database is a structured collection of data stored electronically.
Example:

CREATE DATABASE my_database;




‚úÖ 2. TABLES
Definition: Tables store data in rows and columns in a database.
Example:

CREATE TABLE students (
  id INT,
  name VARCHAR(100)
);




‚úÖ 3. INSERT ROWS
Definition: Used to add new records to a table.
Example:

INSERT INTO students (id, name)
VALUES (1, 'Alice');




‚úÖ 4. SELECT
Definition: Retrieves data from one or more tables.
Example:


SELECT * FROM students;




‚úÖ 5. UPDATE & DELETE
Definition:

UPDATE modifies existing records.

DELETE removes records.
Examples:

UPDATE students SET name = 'Bob' WHERE id = 1;
DELETE FROM students WHERE id = 1;




‚úÖ 6. AUTOCOMMIT, COMMIT, ROLLBACK
Definition: Used in transaction management.

AUTOCOMMIT: Automatically saves each SQL statement.

COMMIT: Saves all changes.

ROLLBACK: Undoes all changes since the last COMMIT.
Example:

START TRANSACTION;
UPDATE students SET name = 'Charlie' WHERE id = 2;
ROLLBACK;




‚úÖ 7. CONSTRAINTS
Definition: Rules to limit the type of data that can be inserted. Includes:

NOT NULL

UNIQUE

PRIMARY KEY

FOREIGN KEY

CHECK

DEFAULT





‚úÖ 8. PRIMARY KEY
Definition: A column (or group of columns) that uniquely identifies each row.
Example:


CREATE TABLE students (
  id INT PRIMARY KEY,
  name VARCHAR(100)
);




‚úÖ 9. FOREIGN KEY
Definition: Ensures referential integrity by linking two tables.
Example:

CREATE TABLE enrollments (
  student_id INT,
  FOREIGN KEY (student_id) REFERENCES students(id)
);




‚úÖ 10. JOINS
Definition: Combines rows from multiple tables based on related columns.

INNER JOIN

LEFT JOIN

RIGHT JOIN

FULL JOIN

Example:

SELECT students.name, courses.title
FROM students
INNER JOIN enrollments ON students.id = enrollments.student_id
INNER JOIN courses ON enrollments.course_id = courses.id;




‚úÖ 11. FUNCTIONS
Common SQL Functions:

COUNT()

SUM()

AVG()

MIN()

MAX()
Example:

SELECT COUNT(*) FROM students;



‚úÖ 12. ORDER BY
Definition: Sorts the result set in ascending or descending order.
Example:


SELECT * FROM students ORDER BY name ASC;



‚úÖ 13. GROUP BY & HAVING
Definition: Groups rows with the same values.
Example:


SELECT department, COUNT(*) FROM employees
GROUP BY department
HAVING COUNT(*) > 5;



‚úÖ 14. VIEWS
Definition: A virtual table based on the result set of a SQL statement.
Example:


CREATE VIEW student_names AS
SELECT name FROM students;



‚úÖ 15. INDEXES
Definition: Improves the speed of data retrieval.
Example:


CREATE INDEX idx_name ON students(name);




‚úÖ 16. SUBQUERIES
Definition: A query inside another query.
Example:

SELECT name FROM students
WHERE id IN (SELECT student_id FROM enrollments);




‚úÖ 17. CASE
Definition: Conditional expression in SQL.
Example:


SELECT name,
  CASE
    WHEN score >= 90 THEN 'A'
    WHEN score >= 80 THEN 'B'
    ELSE 'C'
  END AS grade
FROM students;


























